---
- name: Ensuring config directories exist
  file:
    path: "{{ node_config_directory }}/{{ item.key }}"
    state: "directory"
    owner: "{{ config_owner_user }}"
    group: "{{ config_owner_group }}"
    mode: "0770"
  become: true
  when:
    - inventory_hostname in groups[item.value.group]
    - item.value.enabled | bool
  with_dict: "{{ prometheus_services }}"

- name: Copying over config.json files
  template:
    src: "{{ item.key }}.json.j2"
    dest: "{{ node_config_directory }}/{{ item.key }}/config.json"
    mode: "0660"
  register: prometheus_config_jsons
  when:
    - inventory_hostname in groups[item.value.group]
    - item.value.enabled | bool
  with_dict: "{{ prometheus_services }}"
  notify:
    - Restart {{ item.key }} container

- name: Determine most specific config file
  set_fact:
    prometheus_config_file: "{{ item }}"
  become: true
  run_once: true
  with_first_found:
    - "{{ node_custom_config }}/prometheus/{{ inventory_hostname }}/prometheus.yml"
    - "{{ node_custom_config }}/prometheus/prometheus.yml"
    - "{{ role_path }}/templates/prometheus.yml.j2"

- name: Determine most specific overrides
  set_fact:
    prometheus_config_overrides_parent: "{{ item }}"
  become: true
  run_once: true
  with_first_found:
    - files:
        - "{{ node_custom_config }}/prometheus/{{ inventory_hostname }}/prometheus.yml.d"
        - "{{ node_custom_config }}/prometheus/prometheus.yml.d"
      skip: true

- name: Find prometheus config overrides
  become: true
  local_action:
    module: find
    paths: "{{ prometheus_config_overrides_parent }}"
    patterns: "*.yml"
  register: prometheus_config_overrides_result
  run_once: true
  when: prometheus_config_overrides_parent is defined

- name: Copying over prometheus config file
  become: true
  vars:
    service: "{{ prometheus_services['prometheus-server']}}"
    overrides: "{{ prometheus_config_overrides_result.files | default([]) | map(attribute='path') | list }}"
  merge_yaml:
    sources: "{{ [prometheus_config_file] + overrides }}"
    dest: "{{ node_config_directory }}/prometheus-server/prometheus.yml"
    mode: "0660"
    extend: true
  register: prometheus_confs
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool
  notify:
    - Restart prometheus-server container

- name: Find prometheus alerting rules
  vars:
    service: "{{ prometheus_services['prometheus-server']}}"
  local_action:
    module: find
    path: "{{ node_custom_config }}/prometheus/rules"
    pattern: "*.rules"
  run_once: True
  register: prometheus_custom_alerting_rules
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool

- name: Create config folder for prometheus alerting rules
  vars:
    service: "{{ prometheus_services['prometheus-server']}}"
  file:
    path: "{{ node_config_directory }}/prometheus-server/rules"
    state: "directory"
    owner: "{{ config_owner_user }}"
    group: "{{ config_owner_group }}"
    mode: "0770"
  become: true
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool

- name: Copying over prometheus alerting rules
  vars:
    service: "{{ prometheus_services['prometheus-server']}}"
  copy:
    src: "{{ item.path }}"
    dest: "{{ node_config_directory }}/prometheus-server/rules/{{ item.path | basename }}"
  register: prometheus_alerting_rules
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool
  with_items: "{{ prometheus_custom_alerting_rules.files }}"
  notify:
    - Restart prometheus-server container

- name: Copying over prometheus alertmanager config file
  vars:
    service: "{{ prometheus_services['prometheus-alertmanager']}}"
  template:
    src: "{{ item }}"
    dest: "{{ node_config_directory }}/prometheus-alertmanager/prometheus-alertmanager.yml"
    mode: "0660"
  register: prometheus_alertmanager_confs
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool
  with_first_found:
    - "{{ node_custom_config }}/prometheus/{{ inventory_hostname }}/prometheus-alertmanager.yml"
    - "{{ node_custom_config }}/prometheus/prometheus-alertmanager.yml"
    - "{{ role_path }}/templates/prometheus-alertmanager.yml.j2"
  notify:
    - Restart prometheus-alertmanager container

- name: Copying over my.cnf for mysqld_exporter
  vars:
    service: "{{ prometheus_services['prometheus-mysqld-exporter']}}"
  merge_configs:
    sources:
      - "{{ node_custom_config }}/prometheus-mysqld-exporter/{{ inventory_hostname }}/my.cnf"
      - "{{ node_custom_config }}/prometheus-mysqld-exporter/my.cnf"
      - "{{ role_path }}/templates/my.cnf.j2"
    dest: "{{ node_config_directory }}/prometheus-mysqld-exporter/my.cnf"
    mode: "0660"
  register: prometheus_conf_mycnf
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool
  notify:
    - Restart prometheus-mysqld-exporter container

- name: Copying cloud config file for openstack exporter
  vars:
    service: "{{ prometheus_services['prometheus-openstack-exporter'] }}"
  template:
    src: "{{ item }}"
    dest: "{{ node_config_directory }}/prometheus-openstack-exporter/clouds.yml"
  register: prometheus_openstack_exporter_confs
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool
  with_first_found:
    - "{{ node_custom_config }}/prometheus-openstack-exporter/{{ inventory_hostname }}/clouds.yml"
    - "{{ node_custom_config }}/prometheus-openstack-exporter/clouds.yml"
    - "{{ role_path }}/templates/clouds.yml.j2"
  notify:
    - Restart prometheus-openstack-exporter container

- name: Copying over built in mtail progs
  vars:
    service: "{{ prometheus_services['prometheus-mtail'] }}"
  template:
    src: "{{ role_path }}/templates/mtail_progs/{{ item }}.mtail.j2"
    dest: "{{ node_config_directory }}/prometheus-mtail/{{ item }}.mtail"
    mode: "0660"
  become: true
  register: prometheus_mtail_progs
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool
  with_items:
    - "syslog"
  notify:
    - Restart prometheus-mtail container

- name: Find custom mtail progs
  vars:
    service: "{{ prometheus_services['prometheus-mtail'] }}"
  local_action:
    module: find
    path: "{{ node_custom_config }}/mtail"
    pattern: "*.mtail"
  run_once: True
  register: find_custom_mtail_progs
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool

- name: Copying over custom mtail progs
  vars:
    service: "{{ prometheus_services['prometheus-mtail'] }}"
  template:
    src: "{{ item.path }}"
    dest: "{{ node_config_directory }}/prometheus-mtail/{{ item.path | basename }}"
    mode: "0660"
  become: true
  register: prometheus_mtail_custom_progs
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool
  with_items: "{{ find_custom_mtail_progs.files }}"
  notify:
    - Restart prometheus-mtail container

- name: Copying over prometheus jiralert config file
  vars:
    service: "{{ prometheus_services['prometheus-jiralert']}}"
  template:
    src: "{{ item }}"
    dest: "{{ node_config_directory }}/prometheus-jiralert/jiralert.yml"
  become: true
  register: prometheus_jiralert_confs
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool
  with_first_found:
    - "{{ node_custom_config }}/prometheus/{{ inventory_hostname }}/prometheus-jiralert.yml"
    - "{{ node_custom_config }}/prometheus/prometheus-jiralert.yml"
    - "{{ role_path }}/templates/prometheus-jiralert.yml.j2"
  notify:
    - Restart prometheus-jiralert container

- name: Copying over prometheus jiralert template file
  vars:
    service: "{{ prometheus_services['prometheus-jiralert']}}"
  copy:
    src: "{{ item }}"
    dest: "{{ node_config_directory }}/prometheus-jiralert/jiralert.tmpl"
  become: true
  register: prometheus_jiralert_template
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool
  with_first_found:
    - "{{ node_custom_config }}/prometheus/{{ inventory_hostname }}/prometheus-jiralert.tmpl"
    - "{{ node_custom_config }}/prometheus/prometheus-jiralert.tmpl"
    - "{{ role_path }}/templates/prometheus-jiralert.tmpl"
  notify:
    - Restart prometheus-jiralert container

- block:
    - name: Find extra prometheus server config files
      become: true
      local_action:
        module: find
        paths: "{{ node_custom_config }}/prometheus/extras/"
        patterns: "*"
        recurse: true
      register: prometheus_config_extras_result
      run_once: true

    - name: Create subdirectories for extra config files
      become: true
      vars:
        dirs: >-
          {{ prometheus_config_extras_result.files | default([])
          | map(attribute='path') | map('dirname') | unique
          | map('relpath', base) | list }}
      file:
        path: "{{ node_config_directory }}/prometheus-server/{{ item }}"
        state: "directory"
        owner: "{{ config_owner_user }}"
        group: "{{ config_owner_group }}"
        mode: "0770"
        recurse: true
      with_items: "{{ dirs }}"

    - name: Template extra prometheus server config files
      become: true
      vars:
        relpath: "{{ item | relpath(base) }}"
      template:
        src: "{{ item }}"
        dest: "{{ node_config_directory }}/prometheus-server/{{ relpath }}"
        mode: "0660"
      with_items: "{{ prometheus_config_extras_result.files | default([]) | map(attribute='path') | list }}"
      register: prometheus_extra_confs
      notify:
        - Restart prometheus-server container
  vars:
    base: "{{ node_custom_config }}/prometheus/"
    service: "{{ prometheus_services['prometheus-server']}}"
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool

- name: Check prometheus containers
  become: true
  kolla_docker:
    action: "compare_container"
    common_options: "{{ docker_common_options }}"
    name: "{{ item.value.container_name }}"
    image: "{{ item.value.image }}"
    volumes: "{{ item.value.volumes }}"
    dimensions: "{{ item.value.dimensions }}"
  register: check_prometheus_containers
  when:
    - kolla_action != "config"
    - inventory_hostname in groups[item.value.group]
    - item.value.enabled | bool
  with_dict: "{{ prometheus_services }}"
  notify:
    - Restart {{ item.key }} container
